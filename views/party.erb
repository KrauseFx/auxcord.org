<h3>Jukebox for Sonos - Party Host</h3>

<h4>Generated URL</h4>
<p><a href="<%= @party_join_link %>"><%= @party_join_link %></a></p>
<%= @qr_code.as_svg(
  color: "000",
  shape_rendering: "crispEdges",
  module_size: 4,
  standalone: true,
  use_path: true,
)
%>

<h4>Manage Party</h4>

<h5>Volume Control</h5>

<button class="button button3" onclick="volumeDown()">Volume Down</button>
<button class="button button3" onclick="volumeUp()">Volume Up</button>

<div class="slidecontainer">
  <input type="range" min="1" max="100" value="<%= @volume %>" class="slider" id="volume-slider">
  <span id="volume-label"><%= @volume %></span>
</div>

<h5>Groups</h5>
<div id="groupsDiv">
  <% @groups.each do |group| %>
    <label class="container"><%= group[:name] %> (<%= group[:number_of_speakers] %> speakers)
      <input value="<%= group[:id] %>" type="radio" name="group" onclick="updateGroup()" <%= @selected_group == group[:id] ? 'checked="checked"' : '' %>>
      <span class="checkmark"></span>
    </label>
  <% end %>
</div>

<h5>End this party</h5>

Ready to head out for the night? Stop the party<br /><br />

<label class="switch">
  <input type="checkbox" id="party-toggle" <%= @party_on ? 'checked="checked"' : '' %>%>
  <span class="switch-slider round"></span>
</label>

<script type="text/javascript">
  // Send the updated volume slider value to the server
  var slider = document.getElementById("volume-slider");
  slider.onchange = function() {
    document.getElementById("volume-label").innerHTML = slider.value;
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", "/party/host/update", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp.send("volume=" + slider.value);
  }

  var partyToggle = document.getElementById("party-toggle");
  partyToggle.onchange = function() {
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", "/party/host/update", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp.send("party_toggle=" + partyToggle.checked);
  }

  function updateGroup() {
    // Get the currently selected group
    var groupToUse = document.querySelector('input[name="group"]:checked').value;
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", "/party/host/update", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp.send("group_to_use=" + groupToUse);
  }
  function volumeUp() {
    var slider = document.getElementById("volume-slider");
    slider.value = parseInt(slider.value) + 5;
    slider.onchange();
  }
  function volumeDown() {
    var slider = document.getElementById("volume-slider");
    slider.value = parseInt(slider.value) - 5;
    slider.onchange();
  }
</script>

<style type="text/css">
  body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  }
  #volume-slider {
    width: 300px;
    margin: 20px;
  }
  #volume-label {
    font-weight: bold;
    font-size: 20px;
  }
</style>

<style type="text/css">
  /* Custom Switch CSS */
  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  .switch-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
  }
  .switch-slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
  }
  input:checked + .switch-slider {
    background-color: #2196F3;
  }
  input:focus + .switch-slider {
    box-shadow: 0 0 1px #2196F3;
  }
  input:checked + .switch-slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
  }
  .switch-slider.round {
    border-radius: 34px;
  }
  .switch-slider.round:before {
    border-radius: 50%;
  }
</style>
<style type="text/css">
  /* Custom Radio Buttons CSS */
  /* The container */
  .container {
    display: block;
    position: relative;
    padding-left: 35px;
    margin-bottom: 12px;
    cursor: pointer;
    font-size: 22px;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Hide the browser's default radio button */
  .container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  /* Create a custom radio button */
  .checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;
    background-color: #eee;
    border-radius: 50%;
  }

  /* On mouse-over, add a grey background color */
  .container:hover input ~ .checkmark {
    background-color: #ccc;
  }

  /* When the radio button is checked, add a blue background */
  .container input:checked ~ .checkmark {
    background-color: #2196F3;
  }

  /* Create the indicator (the dot/circle - hidden when not checked) */
  .checkmark:after {
    content: "";
    position: absolute;
    display: none;
  }

  /* Show the indicator (dot/circle) when checked */
  .container input:checked ~ .checkmark:after {
    display: block;
  }

  /* Style the indicator (dot/circle) */
  .container .checkmark:after {
    top: 9px;
    left: 9px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: white;
  }
</style>
<style type="text/css">
  .button {
    background-color: #6495ED;
    border: none;
    color: white;
    padding: 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
  }

  .button1 {border-radius: 2px;}
  .button2 {border-radius: 4px;}
  .button3 {border-radius: 8px;}
  .button4 {border-radius: 12px;}
  .button5 {border-radius: 50%;}
</style>
